{"version":3,"file":"acejs.esm.js","sources":["../src/ace-di.js","../src/ace-utils.js","../src/ace-reactivity.js","../src/ace-components.js"],"sourcesContent":["/**\r\n * A simple dependency injection container.\r\n * Stores services by name and provides them when requested.\r\n */\r\nconst container = new Map();\r\n\r\n/**\r\n * Registers a class as a service in the dependency injection container.\r\n * @param {string} name - The name of the service.\r\n * @returns {ClassDecorator} - A decorator function for classes.\r\n */\r\nexport function provide(name) {\r\n    return function (target, context) {\r\n        if (context.kind !== 'class') {\r\n            throw new Error(`@Service can only be used on classes, not on \"${context.kind}\"`);\r\n        }\r\n\r\n        container.set(name, new target());\r\n    };\r\n}\r\n\r\n/**\r\n * Injects a service from the dependency injection container into a field or method.\r\n * @param {string} name - The name of the service to inject.\r\n * @returns {FieldDecorator|MethodDecorator} - A decorator function for fields or methods.\r\n */\r\nexport function inject(name) {\r\n    return function (target, context) {\r\n        if (context.kind === 'field') {\r\n            return () => container.get(name);\r\n        } else if (context.kind === 'method') {\r\n            return function (...args) {\r\n                const service = container.get(name);\r\n                return target.apply(this, [...args, service]);\r\n            };\r\n        }\r\n    };\r\n}\r\n","/**\r\n * Checks if a value is an object.\r\n * @param {*} val - The value to check.\r\n * @returns {boolean} - True if the value is an object, false otherwise.\r\n */\r\nexport function isObject(val) {\r\n    return val !== null && typeof val === 'object' && !Array.isArray(val);\r\n}\r\n\r\n/**\r\n * Converts a lower camelCase string to a valid attribute name.\r\n * @param {string} str - The camelCase string to convert.\r\n * @returns {string} - The converted attribute name.\r\n */\r\nexport function camelCaseToAttributeName(str) {\r\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\n/**\r\n * Sets a property as an attribute on a DOM element.\r\n * Converts camelCase to dash-case and sets or removes the attribute.\r\n * @param {string} key - The property name (camelCase).\r\n * @param {*} value - The value to set as the attribute.\r\n */\r\nexport function propertyToAttribute(key, value) {\r\n    const attrName = camelCaseToAttributeName(key);\r\n    if (value === null || value === undefined) {\r\n        this.removeAttribute(attrName);\r\n    } else {\r\n        this.setAttribute(attrName, value.toString());\r\n    }\r\n}\r\n\r\n/**\r\n * Helper to query elements in shadow DOM only.\r\n * @param {Element} host - The host element (this).\r\n * @param {string} selector - The CSS selector.\r\n * @param {boolean} all - true for all elements, false for the first.\r\n * @returns {Element|Element[]|null}\r\n */\r\nexport function queryDom(host, selector, all = false) {\r\n    if (!host.shadowRoot) return all ? null : null;\r\n    return all\r\n        ? Array.from(host.shadowRoot.querySelectorAll(selector)) || null\r\n        : host.shadowRoot.querySelector(selector);\r\n}","import { isObject } from './ace-utils.js';\r\n\r\nconst dependenciesMap = new WeakMap();\r\nconst effectQueue = new Set();\r\nlet activeEffect = null;\r\nlet isBatching = false;\r\n\r\n/**\r\n * Tracks dependencies for reactive objects.\r\n * @param {Object} target - The reactive object.\r\n * @param {string|symbol} key - The property key being accessed.\r\n */\r\nfunction track(target, key) {\r\n    if (!activeEffect) return;\r\n\r\n    let dependencies = dependenciesMap.get(target);\r\n    if (!dependencies) {\r\n        dependencies = new Map();\r\n        dependenciesMap.set(target, dependencies);\r\n    }\r\n\r\n    let dependency = dependencies.get(key);\r\n    if (!dependency) {\r\n        dependency = new Set();\r\n        dependencies.set(key, dependency);\r\n    }\r\n\r\n    dependency.add(activeEffect);\r\n}\r\n\r\n/**\r\n * Triggers effects for a reactive object's property.\r\n * @param {Object} target - The reactive object.\r\n * @param {string|symbol} key - The property key being modified.\r\n */\r\nfunction trigger(target, key) {\r\n    const dependencies = dependenciesMap.get(target);\r\n    if (!dependencies) return;\r\n\r\n    const dependency = dependencies.get(key);\r\n    if (dependency) {\r\n        dependency.forEach((effectFn) => effectQueue.add(effectFn));\r\n    }\r\n\r\n    if (!isBatching) {\r\n        isBatching = true;\r\n        queueMicrotask(() => {\r\n            effectQueue.forEach((effectFn) => effectFn());\r\n            effectQueue.clear();\r\n            isBatching = false;\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a reactive proxy for an object.\r\n * @template T\r\n * @param {T} target - The target object to make reactive.\r\n * @param {{ deep?: boolean }} [options] - Options for reactivity.\r\n * @returns {T} - The reactive proxy.\r\n */\r\nexport function reactive(target, options) {\r\n    if (!isObject(target)) return target;\r\n\r\n    return new Proxy(target, {\r\n        get(obj, key, receiver) {\r\n            const result = Reflect.get(obj, key, receiver);\r\n\r\n            if (options?.deep && isObject(result)) {\r\n                return reactive(result, options);\r\n            }\r\n\r\n            track(obj, key);\r\n            return result;\r\n        },\r\n\r\n        set(obj, key, value, receiver) {\r\n            const prevValue = Reflect.get(obj, key, receiver);\r\n            if (prevValue === value) {\r\n                return true;\r\n            }\r\n\r\n            const result = Reflect.set(obj, key, value, receiver);\r\n\r\n            trigger(obj, key);\r\n            return result;\r\n        },\r\n    });\r\n}\r\n\r\n/**\r\n * Executes a reactive effect function.\r\n * @param {Function} fn - The effect function to execute.\r\n */\r\nfunction useEffect(fn) {\r\n    activeEffect = fn;\r\n    fn();\r\n    activeEffect = null;\r\n}\r\n\r\n/**\r\n * Creates a computed property that automatically updates when its dependencies change.\r\n * @param {Function} getter - The function to compute the value.\r\n * @returns {Proxy} - A reactive proxy for the computed value.\r\n */\r\nfunction createComputedProxy(getter) {\r\n    let cachedValue;\r\n    let isDirty = true;\r\n\r\n    const effectFn = () => {\r\n        isDirty = true;\r\n        trigger(computedProxy, 'value');\r\n    };\r\n\r\n    const computedProxy = reactive({\r\n        get value() {\r\n            if (isDirty) {\r\n                activeEffect = effectFn;\r\n                cachedValue = getter();\r\n                activeEffect = null;\r\n                isDirty = false;\r\n            }\r\n            track(computedProxy, 'value');\r\n            return cachedValue;\r\n        },\r\n    });\r\n\r\n    return computedProxy;\r\n}\r\n\r\n/**\r\n * Creates a reactive reference for a primitive value or object.\r\n * @template T\r\n * @param {T} value - The initial value of the reference.\r\n * @returns {Object} - A reactive reference with a `value` property.\r\n */\r\nexport function ref(value) {\r\n    const refObject = reactive({ value });\r\n    return refObject;\r\n}\r\n\r\n/**\r\n * Decorator to create a reactive effect for a method.\r\n * @param {Function} target - The target method.\r\n * @param {Object} context - The context of the method.\r\n */\r\nexport function effect(target, context) {\r\n    if (context.kind !== 'method') {\r\n        throw new Error(`@effect can only be used on methods, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        const boundEffect = target.bind(this);\r\n        queueMicrotask(() => useEffect(boundEffect));\r\n    });\r\n}\r\n\r\n/**\r\n * Decorator to make a class field reactive.\r\n * @param {Object} target - The target class.\r\n * @param {Object} context - The context of the field.\r\n * @returns {Function} - A function to initialize the reactive field.\r\n */\r\nexport function state(target, context) {\r\n    if (context.kind !== 'field') {\r\n        throw new Error(`@state can only be used on fields, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    return (value, options = {}) => reactive(value, options);\r\n}\r\n\r\n/**\r\n * Decorator to create a computed property.\r\n * @param {Object} target - The target class.\r\n * @param {Object} context - The context of the field.\r\n */\r\nexport function computed(target, context) {\r\n    if (context.kind !== 'field') {\r\n        throw new Error(`@computed can only be used on fields, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        const getter = this[context.name];\r\n        const computedValue = createComputedProxy(getter.bind(this));\r\n\r\n        Object.defineProperty(this, context.name, {\r\n            get: () => computedValue.value,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Decorator to make a class field a reactive reference.\r\n * @param {Object} target - The target class.\r\n * @param {Object} context - The context of the field.\r\n */\r\nexport function property(target, context) {\r\n    if (context.kind !== 'field') {\r\n        throw new Error(`@property can only be used on fields, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        const initialValue = this[context.name];\r\n        const refValue = ref(initialValue);\r\n\r\n        Object.defineProperty(this, context.name, {\r\n            get: () => refValue.value,\r\n            set: (newValue) => {\r\n                refValue.value = newValue;\r\n            },\r\n        });\r\n    });\r\n}\r\n","import { reactive } from './ace-reactivity.js';\r\nimport { propertyToAttribute, queryDom } from './ace-utils.js';\r\n\r\n/**\r\n * Decorator to query an element by CSS selector in shadow DOM.\r\n * @param {string} selector - The CSS selector.\r\n * @returns {PropertyDecorator} - A decorator for fields.\r\n */\r\nexport function query(selector) {\r\n    return function (target, context) {\r\n        if (context.kind !== 'field') {\r\n            throw new Error(`@query can only be used on fields, not on \"${context.kind}\"`);\r\n        }\r\n        context.addInitializer(function () {\r\n            Object.defineProperty(this, context.name, {\r\n                get: function () {\r\n                    return queryDom(this, selector, false);\r\n                },\r\n                configurable: true,\r\n                enumerable: true,\r\n            });\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * Decorator to query all elements by CSS selector in shadow DOM.\r\n * @param {string} selector - The CSS selector.\r\n * @returns {PropertyDecorator} - A decorator for fields.\r\n */\r\nexport function queryAll(selector) {\r\n    return function (target, context) {\r\n        if (context.kind !== 'field') {\r\n            throw new Error(`@queryAll can only be used on fields, not on \"${context.kind}\"`);\r\n        }\r\n        context.addInitializer(function () {\r\n            Object.defineProperty(this, context.name, {\r\n                get: function () {\r\n                    return queryDom(this, selector, true);\r\n                },\r\n                configurable: true,\r\n                enumerable: true,\r\n            });\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * Registers a class as a custom element.\r\n * @param {string} name - The name of the custom element.\r\n * @returns {ClassDecorator} - A decorator function for classes.\r\n */\r\nexport function customElement(name) {\r\n    return function (target, context) {\r\n        if (context.kind !== 'class') {\r\n            throw new Error(`@customElement can only be used on classes, not on \"${context.kind}\"`);\r\n        }\r\n\r\n        context.addInitializer(() => customElements.define(name, target));\r\n    };\r\n}\r\n\r\n/**\r\n * Binds a method to the instance of the class.\r\n * @param {Function} target - The target method.\r\n * @param {Object} context - The context of the method.\r\n * @returns {MethodDecorator} - A decorator function for methods.\r\n */\r\nexport function bound(target, context) {\r\n    if (context.kind !== 'method') {\r\n        throw new Error(`@bound can only be used on methods, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        this[context.name] = this[context.name].bind(this);\r\n    });\r\n}\r\n\r\n/**\r\n * Makes a property reactive and reflects it to an attribute.\r\n * @param {Object} options - Options for the reflected property.\r\n * @param {Function} [options.converter] - A function to convert the attribute value to a property value.\r\n * @returns {PropertyDecorator} - A decorator function for properties.\r\n */\r\nexport function attribute(target, context) {\r\n    if (context.kind !== 'field') {\r\n        throw new Error(`@attribute can only be used on fields, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        const key = context.name;\r\n        const refValue = reactive({ value: this[key] });\r\n        propertyToAttribute.call(this, key, refValue.value);\r\n\r\n        Object.defineProperty(this, key, {\r\n            get() {\r\n                return refValue.value;\r\n            },\r\n            set(value) {\r\n                const prevValue = refValue.value;\r\n                if (value === prevValue) return;\r\n\r\n                refValue.value = value;\r\n                propertyToAttribute.call(this, key, value);\r\n            },\r\n        });\r\n    });\r\n}\r\n"],"names":["container","Map","provide","name","target","context","kind","Error","concat","set","inject","get","service","_len","arguments","length","args","Array","_key","apply","this","isObject","val","_typeof","isArray","propertyToAttribute","key","value","attrName","replace","toLowerCase","removeAttribute","setAttribute","toString","queryDom","host","selector","all","undefined","shadowRoot","from","querySelectorAll","querySelector","dependenciesMap","WeakMap","effectQueue","Set","activeEffect","isBatching","track","dependencies","dependency","add","trigger","forEach","effectFn","queueMicrotask","clear","reactive","options","Proxy","obj","receiver","result","Reflect","deep","effect","addInitializer","boundEffect","bind","fn","state","computed","computedValue","getter","cachedValue","isDirty","computedProxy","createComputedProxy","Object","defineProperty","property","initialValue","refValue","newValue","query","configurable","enumerable","queryAll","customElement","customElements","define","bound","attribute","call"],"mappings":"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"}
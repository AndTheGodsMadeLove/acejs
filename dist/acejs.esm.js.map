{"version":3,"file":"acejs.esm.js","sources":["../src/ace-di.js","../src/ace-utils.js","../src/ace-reactivity.js","../src/ace-components.js"],"sourcesContent":["/**\r\n * A simple dependency injection container.\r\n * Stores services by name and provides them when requested.\r\n */\r\nconst container = new Map();\r\n\r\n/**\r\n * Registers a class as a service in the dependency injection container.\r\n * @param {string} name - The name of the service.\r\n * @returns {ClassDecorator} - A decorator function for classes.\r\n */\r\nexport function provide(name) {\r\n    return function (target, context) {\r\n        if (context.kind !== 'class') {\r\n            throw new Error(`@Service can only be used on classes, not on \"${context.kind}\"`);\r\n        }\r\n\r\n        container.set(name, new target());\r\n    };\r\n}\r\n\r\n/**\r\n * Injects a service from the dependency injection container into a field or method.\r\n * @param {string} name - The name of the service to inject.\r\n * @returns {FieldDecorator|MethodDecorator} - A decorator function for fields or methods.\r\n */\r\nexport function inject(name) {\r\n    return function (target, context) {\r\n        if (context.kind === 'field') {\r\n            return () => container.get(name);\r\n        } else if (context.kind === 'method') {\r\n            return function (...args) {\r\n                const service = container.get(name);\r\n                return target.apply(this, [...args, service]);\r\n            };\r\n        }\r\n    };\r\n}\r\n","/**\r\n * Checks if a value is an object.\r\n * @param {*} val - The value to check.\r\n * @returns {boolean} - True if the value is an object, false otherwise.\r\n */\r\nexport function isObject(val) {\r\n    return val !== null && typeof val === 'object' && !Array.isArray(val);\r\n}\r\n\r\n/**\r\n * Converts a lower camelCase string to a valid attribute name.\r\n * @param {string} str - The camelCase string to convert.\r\n * @returns {string} - The converted attribute name.\r\n */\r\nexport function camelCaseToAttributeName(str) {\r\n    return str.replace(/([a-z])([A-Z])/g, '$1-$2').toLowerCase();\r\n}\r\n\r\n/**\r\n * Sets a property as an attribute on a DOM element.\r\n * Converts camelCase to dash-case and sets or removes the attribute.\r\n * @param {string} key - The property name (camelCase).\r\n * @param {*} value - The value to set as the attribute.\r\n */\r\nexport function propertyToAttribute(key, value) {\r\n    const attrName = camelCaseToAttributeName(key);\r\n    if (value === null || value === undefined) {\r\n        this.removeAttribute(attrName);\r\n    } else {\r\n        this.setAttribute(attrName, value.toString());\r\n    }\r\n}\r\n\r\n/**\r\n * Helper to query elements in shadow DOM only.\r\n * @param {Element} host - The host element (this).\r\n * @param {string} selector - The CSS selector.\r\n * @param {boolean} all - true for all elements, false for the first.\r\n * @returns {Element|Element[]|null}\r\n */\r\nexport function queryDom(host, selector, all = false) {\r\n    if (!host.shadowRoot) return all ? null : null;\r\n    return all\r\n        ? Array.from(host.shadowRoot.querySelectorAll(selector)) || null\r\n        : host.shadowRoot.querySelector(selector);\r\n}","import { isObject } from './ace-utils.js';\r\n\r\nconst dependenciesMap = new WeakMap();\r\nconst effectQueue = new Set();\r\nlet activeEffect = null;\r\nlet isBatching = false;\r\n\r\n/**\r\n * Tracks dependencies for reactive objects.\r\n * @param {Object} target - The reactive object.\r\n * @param {string|symbol} key - The property key being accessed.\r\n */\r\nfunction track(target, key) {\r\n    if (!activeEffect) return;\r\n\r\n    let dependencies = dependenciesMap.get(target);\r\n    if (!dependencies) {\r\n        dependencies = new Map();\r\n        dependenciesMap.set(target, dependencies);\r\n    }\r\n\r\n    let dependency = dependencies.get(key);\r\n    if (!dependency) {\r\n        dependency = new Set();\r\n        dependencies.set(key, dependency);\r\n    }\r\n\r\n    dependency.add(activeEffect);\r\n}\r\n\r\n/**\r\n * Triggers effects for a reactive object's property.\r\n * @param {Object} target - The reactive object.\r\n * @param {string|symbol} key - The property key being modified.\r\n */\r\nfunction trigger(target, key) {\r\n    const dependencies = dependenciesMap.get(target);\r\n    if (!dependencies) return;\r\n\r\n    const dependency = dependencies.get(key);\r\n    if (dependency) {\r\n        dependency.forEach((effectFn) => effectQueue.add(effectFn));\r\n    }\r\n\r\n    if (!isBatching) {\r\n        isBatching = true;\r\n        queueMicrotask(() => {\r\n            effectQueue.forEach((effectFn) => effectFn());\r\n            effectQueue.clear();\r\n            isBatching = false;\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a reactive proxy for an object.\r\n * @template T\r\n * @param {T} target - The target object to make reactive.\r\n * @param {{ deep?: boolean }} [options] - Options for reactivity.\r\n * @returns {T} - The reactive proxy.\r\n */\r\nexport function reactive(target, options) {\r\n    if (!isObject(target)) return target;\r\n\r\n    return new Proxy(target, {\r\n        get(obj, key, receiver) {\r\n            const result = Reflect.get(obj, key, receiver);\r\n\r\n            if (options?.deep && isObject(result)) {\r\n                return reactive(result, options);\r\n            }\r\n\r\n            track(obj, key);\r\n            return result;\r\n        },\r\n\r\n        set(obj, key, value, receiver) {\r\n            const prevValue = Reflect.get(obj, key, receiver);\r\n            if (prevValue === value) {\r\n                return true;\r\n            }\r\n\r\n            const result = Reflect.set(obj, key, value, receiver);\r\n\r\n            trigger(obj, key);\r\n            return result;\r\n        },\r\n    });\r\n}\r\n\r\n/**\r\n * Executes a reactive effect function.\r\n * @param {Function} fn - The effect function to execute.\r\n */\r\nfunction useEffect(fn) {\r\n    activeEffect = fn;\r\n    fn();\r\n    activeEffect = null;\r\n}\r\n\r\n/**\r\n * Creates a computed property that automatically updates when its dependencies change.\r\n * @param {Function} getter - The function to compute the value.\r\n * @returns {Proxy} - A reactive proxy for the computed value.\r\n */\r\nfunction createComputedProxy(getter) {\r\n    let cachedValue;\r\n    let isDirty = true;\r\n\r\n    const effectFn = () => {\r\n        isDirty = true;\r\n        trigger(computedProxy, 'value');\r\n    };\r\n\r\n    const computedProxy = reactive({\r\n        get value() {\r\n            if (isDirty) {\r\n                activeEffect = effectFn;\r\n                cachedValue = getter();\r\n                activeEffect = null;\r\n                isDirty = false;\r\n            }\r\n            track(computedProxy, 'value');\r\n            return cachedValue;\r\n        },\r\n    });\r\n\r\n    return computedProxy;\r\n}\r\n\r\n/**\r\n * Creates a reactive reference for a primitive value or object.\r\n * @template T\r\n * @param {T} value - The initial value of the reference.\r\n * @returns {Object} - A reactive reference with a `value` property.\r\n */\r\nexport function ref(value) {\r\n    const refObject = reactive({ value });\r\n    return refObject;\r\n}\r\n\r\n/**\r\n * Decorator to create a reactive effect for a method.\r\n * @param {Function} target - The target method.\r\n * @param {Object} context - The context of the method.\r\n */\r\nexport function effect(target, context) {\r\n    if (context.kind !== 'method') {\r\n        throw new Error(`@effect can only be used on methods, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        const boundEffect = target.bind(this);\r\n        queueMicrotask(() => useEffect(boundEffect));\r\n    });\r\n}\r\n\r\n/**\r\n * Decorator to make a class field reactive.\r\n * @param {Object} target - The target class.\r\n * @param {Object} context - The context of the field.\r\n * @returns {Function} - A function to initialize the reactive field.\r\n */\r\nexport function state(target, context) {\r\n    if (context.kind !== 'field') {\r\n        throw new Error(`@state can only be used on fields, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    return (value, options = {}) => reactive(value, options);\r\n}\r\n\r\n/**\r\n * Decorator to create a computed property.\r\n * @param {Object} target - The target class.\r\n * @param {Object} context - The context of the field.\r\n */\r\nexport function computed(target, context) {\r\n    if (context.kind !== 'field') {\r\n        throw new Error(`@computed can only be used on fields, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        const getter = this[context.name];\r\n        const computedValue = createComputedProxy(getter.bind(this));\r\n\r\n        Object.defineProperty(this, context.name, {\r\n            get: () => computedValue.value,\r\n        });\r\n    });\r\n}\r\n\r\n/**\r\n * Decorator to make a class field a reactive reference.\r\n * @param {Object} target - The target class.\r\n * @param {Object} context - The context of the field.\r\n */\r\nexport function property(target, context) {\r\n    if (context.kind !== 'field') {\r\n        throw new Error(`@property can only be used on fields, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        const initialValue = this[context.name];\r\n        const refValue = ref(initialValue);\r\n\r\n        Object.defineProperty(this, context.name, {\r\n            get: () => refValue.value,\r\n            set: (newValue) => {\r\n                refValue.value = newValue;\r\n            },\r\n        });\r\n    });\r\n}\r\n","import { reactive } from './ace-reactivity.js';\r\nimport { propertyToAttribute, queryDom } from './ace-utils.js';\r\n\r\n/**\r\n * Decorator to query an element by CSS selector in shadow DOM.\r\n * @param {string} selector - The CSS selector.\r\n * @returns {PropertyDecorator} - A decorator for fields.\r\n */\r\nexport function query(selector) {\r\n    return function (target, context) {\r\n        if (context.kind !== 'field') {\r\n            throw new Error(`@query can only be used on fields, not on \"${context.kind}\"`);\r\n        }\r\n        context.addInitializer(function () {\r\n            Object.defineProperty(this, context.name, {\r\n                get: function () {\r\n                    return queryDom(this, selector, false);\r\n                },\r\n                configurable: true,\r\n                enumerable: true,\r\n            });\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * Decorator to query all elements by CSS selector in shadow DOM.\r\n * @param {string} selector - The CSS selector.\r\n * @returns {PropertyDecorator} - A decorator for fields.\r\n */\r\nexport function queryAll(selector) {\r\n    return function (target, context) {\r\n        if (context.kind !== 'field') {\r\n            throw new Error(`@queryAll can only be used on fields, not on \"${context.kind}\"`);\r\n        }\r\n        context.addInitializer(function () {\r\n            Object.defineProperty(this, context.name, {\r\n                get: function () {\r\n                    return queryDom(this, selector, true);\r\n                },\r\n                configurable: true,\r\n                enumerable: true,\r\n            });\r\n        });\r\n    };\r\n}\r\n\r\n/**\r\n * Registers a class as a custom element.\r\n * @param {string} name - The name of the custom element.\r\n * @returns {ClassDecorator} - A decorator function for classes.\r\n */\r\nexport function customElement(name) {\r\n    return function (target, context) {\r\n        if (context.kind !== 'class') {\r\n            throw new Error(`@customElement can only be used on classes, not on \"${context.kind}\"`);\r\n        }\r\n\r\n        context.addInitializer(() => customElements.define(name, target));\r\n    };\r\n}\r\n\r\n/**\r\n * Binds a method to the instance of the class.\r\n * @param {Function} target - The target method.\r\n * @param {Object} context - The context of the method.\r\n * @returns {MethodDecorator} - A decorator function for methods.\r\n */\r\nexport function bound(target, context) {\r\n    if (context.kind !== 'method') {\r\n        throw new Error(`@bound can only be used on methods, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        this[context.name] = this[context.name].bind(this);\r\n    });\r\n}\r\n\r\n/**\r\n * Makes a property reactive and reflects it to an attribute.\r\n * @param {Object} options - Options for the reflected property.\r\n * @param {Function} [options.converter] - A function to convert the attribute value to a property value.\r\n * @returns {PropertyDecorator} - A decorator function for properties.\r\n */\r\nexport function attribute(target, context) {\r\n    if (context.kind !== 'field') {\r\n        throw new Error(`@attribute can only be used on fields, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        const key = context.name;\r\n        const refValue = reactive({ value: this[key] });\r\n        propertyToAttribute.call(this, key, refValue.value);\r\n\r\n        Object.defineProperty(this, key, {\r\n            get() {\r\n                return refValue.value;\r\n            },\r\n            set(value) {\r\n                const prevValue = refValue.value;\r\n                if (value === prevValue) return;\r\n\r\n                refValue.value = value;\r\n                propertyToAttribute.call(this, key, value);\r\n            },\r\n        });\r\n    });\r\n}\r\n"],"names":["container","Map","provide","name","target","context","kind","Error","set","inject","get","args","service","apply","this","isObject","val","Array","isArray","propertyToAttribute","key","value","attrName","replace","toLowerCase","removeAttribute","setAttribute","toString","queryDom","host","selector","all","shadowRoot","from","querySelectorAll","querySelector","dependenciesMap","WeakMap","effectQueue","Set","activeEffect","isBatching","track","dependencies","dependency","add","trigger","forEach","effectFn","queueMicrotask","clear","reactive","options","Proxy","obj","receiver","result","Reflect","deep","effect","addInitializer","boundEffect","bind","useEffect","fn","state","computed","computedValue","getter","cachedValue","isDirty","computedProxy","createComputedProxy","Object","defineProperty","property","initialValue","refValue","newValue","query","configurable","enumerable","queryAll","customElement","customElements","define","bound","attribute","call"],"mappings":"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"}
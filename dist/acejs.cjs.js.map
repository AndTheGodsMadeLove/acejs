{"version":3,"file":"acejs.cjs.js","sources":["../src/ace-utils.js","../src/ace-di.js","../src/ace-reactivity.js","../src/ace-components.js"],"sourcesContent":["/**\r\n * Checks if a value is an object.\r\n * @param {*} val - The value to check.\r\n * @returns {boolean} - True if the value is an object, false otherwise.\r\n */\r\nexport function isObject(val) {\r\n    return val !== null && typeof val === 'object' && !Array.isArray(val);\r\n}","/**\r\n * A simple dependency injection container.\r\n * Stores services by name and provides them when requested.\r\n */\r\nconst container = new Map();\r\n\r\n/**\r\n * Registers a class as a service in the dependency injection container.\r\n * @param {string} name - The name of the service.\r\n * @returns {ClassDecorator} - A decorator function for classes.\r\n */\r\nexport function Service(name) {\r\n  return function (target, context) {\r\n    if (context.kind !== 'class') {\r\n      throw new Error(`@Service can only be used on classes, not on \"${context.kind}\"`);\r\n    }\r\n    container.set(name, new target());\r\n  };\r\n}\r\n\r\n/**\r\n * Injects a service into a field or method.\r\n * @param {string} name - The name of the service to inject.\r\n * @returns {FieldDecorator|MethodDecorator} - A decorator function for fields or methods.\r\n */\r\nexport function Inject(name) {\r\n  return function (target, context) {\r\n    if (context.kind === 'field') {\r\n      return () => container.get(name);\r\n    } else if (context.kind === 'method') {\r\n      return function (...args) {\r\n        const service = container.get(name);\r\n        return target.apply(this, [...args, service]);\r\n      };\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * A simple logger service.\r\n * Provides logging functionality.\r\n */\r\n@Service('Logger')\r\nclass Logger {\r\n  /**\r\n   * Logs a message to the console.\r\n   * @param {string} message - The message to log.\r\n   */\r\n  log(message) {\r\n    console.log(`Log: ${message}`);\r\n  }\r\n}","import { isObject } from './ace-utils.js';\r\n\r\nconst dependenciesMap = new WeakMap();\r\nconst effectQueue = new Set();\r\nlet activeEffect = null;\r\nlet isBatching = false;\r\n\r\n/**\r\n * Tracks dependencies for reactive objects.\r\n * @param {Object} target - The reactive object.\r\n * @param {string|symbol} key - The property key being accessed.\r\n */\r\nfunction track(target, key) {\r\n    if (!activeEffect) return;\r\n\r\n    let dependencies = dependenciesMap.get(target);\r\n    if (!dependencies) {\r\n        dependencies = new Map();\r\n        dependenciesMap.set(target, dependencies);\r\n    }\r\n\r\n    let dependency = dependencies.get(key);\r\n    if (!dependency) {\r\n        dependency = new Set();\r\n        dependencies.set(key, dependency);\r\n    }\r\n\r\n    dependency.add(activeEffect);\r\n}\r\n\r\n/**\r\n * Triggers effects for a reactive object's property.\r\n * @param {Object} target - The reactive object.\r\n * @param {string|symbol} key - The property key being modified.\r\n */\r\nfunction trigger(target, key) {\r\n    const dependencies = dependenciesMap.get(target);\r\n    if (!dependencies) return;\r\n\r\n    const dependency = dependencies.get(key);\r\n    if (dependency) {\r\n        dependency.forEach(effectFn => effectQueue.add(effectFn));\r\n    }\r\n\r\n    if (!isBatching) {\r\n        isBatching = true;\r\n        queueMicrotask(() => {\r\n            effectQueue.forEach(effectFn => effectFn());\r\n            effectQueue.clear();\r\n            isBatching = false;\r\n        });\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a reactive proxy for an object.\r\n * @template T\r\n * @param {T} target - The target object to make reactive.\r\n * @param {{ deep?: boolean }} [options] - Options for reactivity.\r\n * @returns {T} - The reactive proxy.\r\n */\r\nfunction reactive(target, options) {\r\n    if (!isObject(target)) return target;\r\n\r\n    return new Proxy(target, {\r\n        get(obj, key, receiver) {\r\n            const result = Reflect.get(obj, key, receiver);\r\n\r\n            if (options?.deep && isObject(result)) {\r\n                return reactive(result, options);\r\n            }\r\n\r\n            track(obj, key);\r\n            return result;\r\n        },\r\n\r\n        set(obj, key, value, receiver) {\r\n            const prevValue = Reflect.get(obj, key, receiver);\r\n            if (prevValue === value) {\r\n                return true;\r\n            }\r\n\r\n            const result = Reflect.set(obj, key, value, receiver);\r\n\r\n            trigger(obj, key);\r\n            return result;\r\n        },\r\n    });\r\n}\r\n\r\n/**\r\n * Executes a reactive effect function.\r\n * @param {Function} fn - The effect function to execute.\r\n */\r\nfunction useEffect(fn) {\r\n    activeEffect = fn;\r\n    fn();\r\n    activeEffect = null;\r\n}\r\n\r\n/**\r\n * Creates a computed property that automatically updates when its dependencies change.\r\n * @param {Function} getter - The function to compute the value.\r\n * @returns {Proxy} - A reactive proxy for the computed value.\r\n */\r\nfunction computed(getter) {\r\n    let cachedValue;\r\n    let isDirty = true;\r\n\r\n    const effectFn = () => {\r\n        isDirty = true;\r\n        trigger(computedProxy, 'value');\r\n    };\r\n\r\n    const computedProxy = reactive({\r\n        get value() {\r\n            if (isDirty) {\r\n                activeEffect = effectFn;\r\n                cachedValue = getter();\r\n                activeEffect = null;\r\n                isDirty = false;\r\n            }\r\n            track(computedProxy, 'value');\r\n            return cachedValue;\r\n        },\r\n    });\r\n\r\n    return computedProxy;\r\n}\r\n\r\n\r\n\r\n/**\r\n * Decorator to create a reactive effect for a method.\r\n * @param {Function} target - The target method.\r\n * @param {Object} context - The context of the method.\r\n */\r\nexport function Effect(target, context) {\r\n    if (context.kind !== 'method') {\r\n        throw new Error(`@Effect can only be used on methods, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        const boundEffect = target.bind(this);\r\n        queueMicrotask(() => useEffect(boundEffect));\r\n    });\r\n}\r\n\r\n/**\r\n * Decorator to make a class field reactive.\r\n * @param {Object} target - The target class.\r\n * @param {Object} context - The context of the field.\r\n * @returns {Function} - A function to initialize the reactive field.\r\n */\r\nexport function Reactive(target, context) {\r\n    if (context.kind !== 'field') {\r\n        throw new Error(`@Reactive can only be used on fields, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    return (value, options = {}) => reactive(value, options);\r\n}\r\n\r\n/**\r\n * Decorator to create a computed property.\r\n * @param {Object} target - The target class.\r\n * @param {Object} context - The context of the field.\r\n */\r\nexport function Computed(target, context) {\r\n    if (context.kind !== 'field') {\r\n        throw new Error(`@Computed can only be used on fields, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        const getter = this[context.name];\r\n        const computedValue = computed(getter.bind(this));\r\n\r\n        Object.defineProperty(this, context.name, {\r\n            get: () => computedValue.value,\r\n        });\r\n    });\r\n}\r\n","/**\r\n * Registers a class as a custom element.\r\n * @param {string} name - The name of the custom element.\r\n * @returns {ClassDecorator} - A decorator function for classes.\r\n */\r\nexport function CustomElement(name) {\r\n    return function (target, context) {\r\n        if (context.kind !== 'class') {\r\n            throw new Error(`@CustomElement can only be used on classes, not on \"${context.kind}\"`);\r\n        }\r\n\r\n        context.addInitializer(() => customElements.define(name, target));\r\n    };\r\n}\r\n\r\n/**\r\n * Binds a method to the instance of the class.\r\n * @param {Function} target - The target method.\r\n * @param {Object} context - The context of the method.\r\n * @returns {MethodDecorator} - A decorator function for methods.\r\n */\r\nexport function Bound(target, context) {\r\n    if (context.kind !== 'method') {\r\n        throw new Error(`@Bound can only be used on methods, not on \"${context.kind}\"`);\r\n    }\r\n\r\n    context.addInitializer(function () {\r\n        this[context.name] = this[context.name].bind(this);\r\n    });\r\n}"],"names":["isObject","val","_typeof","Array","isArray","container","Map","Service","name","target","context","kind","Error","concat","set","_applyDecs$c","_applyDecs","_createClass","Logger","_classCallCheck","key","value","message","console","log","c","_initClass","dependenciesMap","WeakMap","effectQueue","Set","activeEffect","isBatching","track","dependencies","get","dependency","add","trigger","forEach","effectFn","queueMicrotask","clear","reactive","options","Proxy","obj","receiver","result","Reflect","deep","addInitializer","this","bind","computedValue","getter","cachedValue","isDirty","computedProxy","computed","Object","defineProperty","customElements","define","boundEffect","fn","service","_len","arguments","length","args","_key","apply","undefined"],"mappings":"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"}